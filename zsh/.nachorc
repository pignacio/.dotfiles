# Virtualenv stuff
WORKON_HOME=$HOME/.virtualenvs
[[ -f /etc/bash_completion.d/virtualenvwrapper ]] && source /etc/bash_completion.d/virtualenvwrapper

function wo() {
  local base_dir="$HOME/src"
  local project=$1
  local project_dir=$(cat <(_wo_find "$base_dir" 1 "$project") <(_wo_find "$base_dir" 2 "$project") | head -1)
  if [[ -z "$project_dir" ]]; then
    echo "Could not find '$project' in '$base_dir'"
    return 1
  fi

  manage=$(find $project_dir -maxdepth 2 -name manage.py | head -1)
  if [ -n "$manage" ]; then
    cd $(dirname $manage);
  else
    cd "$project_dir";
  fi

  if [[ ! -z "$VIRTUAL_ENV" ]]; then
    deactivate
  fi

  if [ -r "$project_dir/env" ]; then
    . "$project_dir/env/bin/activate"
  elif [ -r "$HOME/.virtualenvs/$project" ]; then
    workon $project
  elif [ -r "$HOME/.local/venvs/$project" ]; then
    . "$HOME/.local/venvs/$project/bin/activate"
  fi
}

_wo_find() {
  find -L "$1" -mindepth "$2" -maxdepth "$2" -type d -name "$3"
}


# Git stuff
alias 'gpf!'='git push --force'
alias current_git_root='git rev-parse --show-toplevel'
alias gap='git add --patch'
alias gk='gitk --all'
alias gpt='gp; gp --tags'
alias grb='git rebase'
alias grbi='git rebase -i'
alias prmb='git checkout master; git pull; grmb'
alias grmb='git branch --merged | grep -v -e develop -e master -e "*" | xargs git branch -d'

gmnf() {
  if [[ -z "$1" ]]; then
    echo "No branch supplied"
    return 1
  fi
  branch=$1;
  shift;
  if (( $(git log $branch.. | wc -l ) > 0 )); then
    echo "Para mergear $branch falta el rebase, papi";
  else
    git merge --no-ff $branch "$@"
  fi
}
compdef _git gmnf=git-merge

# Chromium profiles
alias chromium='nohup chromium-browser >>$HOME/.logs/chromium.out 2>>$HOME/.logs/chromium.err &'
alias incognito='chromium-browser --incognito'
alias w-chromium='chromium-browser --user-data-dir=$HOME/.work/chromium'
alias df-chromium='chromium-browser --user-data-dir=$HOME/.df/chromium'
alias webogram='chromium-browser --user-data-dir=$HOME/.webogram >/dev/null 2>&1'


# Django stuff
alias djcompress='./manage.py collectstatic --noinput; time ./manage.py compress'
function djrunserver() {
  while true; do
    djcompress;
    ./manage.py runserver "$@";
    echo "Restarting in 5s";
    sleep 5s;
  done
}
function djpylint() {
  for app in $(find . -mindepth 2 -maxdepth 2 -name "__init__.py" | cut -d "/" -f 2); do
    echo "Running pylint for '$app'"
    pylint $app -r n --ignore=migrations $*
  done
}
alias djmakemessages='./manage.py makemessages --no-wrap --no-location '

# General stuff
alias ap='readlink -f'
alias bp='beet-playlist'
alias rp8='p8 $(current_git_root)'
alias p8b='p8 | grep -v blank'
alias plt='PYTHONPATH=$(readlink -f .) pl ../test'


# Sudo wrapped binaries:
for bin in apt-get puppet tomb lxc-start lxc-stop lxc-create lxc-destroy \
    lxc-info lxc-ls lxc-console lxc-cgroup; do
  alias $bin="sudo $bin"
done

# pep8-all function
function p8() {
  local root=${1:-.}
  find $root -name "*.py" -exec pep8 {} \;
}

# autopep8-all-inplace functionm
function ap8() {
  local root=${1:-.}
  find $root -name "*.py" -exec autopep8 -i {} \;
}

# pylint-all function
function pl() {
  local root=${1:-.}
  find $root -name "*.py" -exec pylint -r n -d C0111 {} +
}

# run Nosetests
function nose() {
  echo "Removing .pyc files"
  find -name "*.pyc" -delete
  if [[ -n "${1:-}" && -e "$1" ]]; then
    test_folder=$1
    shift
  else
    echo "Autodetecting test folder"
    local test_folder=$(_detect_test_folder)
    if [[ -z "$test_folder" ]]; then
      echo "Could not autodetect test folder. Defaulting to current directory"
      test_folder="."
    fi
  fi
  echo "Running tests in '$test_folder'"
  nosetests $test_folder "$@"
}

function _detect_test_folder() {
  local parent=$(readlink -f .)
  local root=$(readlink -f $(current_git_root 2>/dev/null || echo "/"))
  while true; do
    for subfolder in test tests; do
      local folder=$parent/$subfolder
      if [[ -d "$folder" ]]; then
        echo $folder
        return 0
      fi
    done
    if [[ "$parent" == "$root" ]]; then
      return 1;
    fi
    parent=$(dirname $parent)
  done
}

# play all function
pall() {
  for arg; do
    if [ "$arg" = "--random" ]; then
      SORT_FLAGS="${SORT_FLAGS:-} -R"
    fi
  done
  noglob find $1 -name *.mp3 -o -name *.flac -o -name *.ogg | sort ${SORT_FLAGS:-} | tr '\n' '\0' | xargs -0 -n 10000 mplayer
}

#puppet stuff
alias puppet-lint-all='noglob find -name *.pp -exec puppet-lint --with-filename {} +'
alias pla=puppet-lint-all

# get the name of the branch we are on
function git_prompt_info() {
  if [[ "$(git config --get oh-my-zsh.hide-status)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
    ref=${ref#refs/heads/}
    if [[ ${#ref} -gt 30 ]]; then
      ref="$(echo $ref | cut -c -27)..."
    fi
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

# Taking the cool stuff from .oh-my-zsh/plugins/common-aliases
alias -g HH='| head'
alias -g TT='| tail'
alias -g GG='| grep'
alias -g LL="| less"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"

alias dud='du --max-depth=1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

# ... and some of my own
alias -g VV='| vim -'
alias -g SS='| sort'
alias -g UU='| uniq'

# 256 color terminal
export TERM=xterm-256color

# Interactive comments
setopt interactivecomments

function pj() {
while read -r line; do
  if [ -n "$VIRTUAL_ENV" ]; then
    echo "Deactivating '$VIRTUAL_ENV'"
    deactivate
  fi
  local exec_prefix="@"
  local cd_prefix="cd:"
  local workon_prefix="workon:"
  local source_prefix="source:"
  if [[ "$line" = $exec_prefix* ]]; then
    local line=${line#$exec_prefix};
    local toexec='';
    if [[ "$line" = $cd_prefix* ]]; then
      toexec="cd '${line#$cd_prefix}'"
    elif [[ "$line" = $workon_prefix* ]]; then
      toexec="workon '${line#$workon_prefix}'"
    elif [[ "$line" = $source_prefix* ]]; then
      toexec="source '${line#$source_prefix}'"
    else
      echo "Wrong execution line: $exec_prefix$line"
    fi
    if [ -n "${toexec}" ]; then
      echo "Executing: $toexec"
      eval $toexec
    fi
  else
    echo "$line";
  fi
done < <(python $HOME/.dotfiles_scripts/project_jump.py "$@")
}


# vim: ft=zsh
