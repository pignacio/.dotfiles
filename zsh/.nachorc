# Virtualenv stuff
WORKON_HOME=$HOME/.virtualenvs
[[ -f /etc/bash_completion.d/virtualenvwrapper ]] && source /etc/bash_completion.d/virtualenvwrapper

# Gets python binary from a virtualenv, or default python nif it does not exist
function vefile() {
  ve_python="$WORKON_HOME/$1/$2"
  if [[ -e "$ve_python" ]]; then
    echo $ve_python;
  else
    return 1
  fi
}

function vepy() {
  if ! vefile $1 bin/python; then
    echo python
  fi
}

function vepip() {
  if ! vefile $1 bin/pip; then
    echo pip
  fi
}

# Fast workon virtualenv and dir selector
function wo() {
  local base_dir="$HOME/workspaces/aptana"
  local project=$1
  local project_dir=$(find $base_dir -maxdepth 4 -type d -name "$project" | head -1)
  if [[ -z "$project_dir" ]]; then
    echo "Could not find '$project' in '$base_dir'"
    return 1
  fi

  cd "$project_dir"

  if [[ ! -z "$VIRTUAL_ENV" ]]; then
    deactivate
  fi

  if  vefile $project . >/dev/null; then
    workon $project
  fi

}


alias apt-get='sudo apt-get'
alias mee='mvn eclipse:eclipse'
alias ap='readlink -f'


alias prmb='git checkout master; git pull; rmb'
alias gk='gitk --all'
alias 'gpf!'='git push --force'
alias grb='git rebase'
alias grbi='git rebase -i'
alias gpt='gp; gp --tags'
alias gap='git add --patch'
alias gmnf='git merge --no-ff'

alias aptana='nohup $HOME/opt/aptana/AptanaStudio3 -data $HOME/workspaces/aptana >/dev/null 2>&1 &'
alias chromium='nohup chromium-browser >>$HOME/.logs/chromium.out 2>>$HOME/.logs/chromium.err &'
alias incognito='nohup chromium-browser --incognito >>/dev/null 2>&1 &'
alias hh-chromium='nohup chromium-browser --user-data-dir=$HOME/.hotelhoje/chromium >>$HOME/.hotelhoje/logs/chromium.out 2>>$HOME/.hotelhoje/logs/chromium.err &'
alias hh-aptana='nohup $HOME/opt/aptana/AptanaStudio3 -data $HOME/hotelhoje/aptana >/dev/null 2>&1 &'

alias djcompress='./manage.py collectstatic --noinput; time ./manage.py compress'

alias phpcheck='for x in $(find -name "*.php"); do php -l $x; done'

source $HOME/.gitrmb

alias current_git_root='git rev-parse --show-toplevel'
alias pylint='pylint -d C0111'
alias tomb='sudo tomb'
alias gifmaker="$(vepy gifmaker) $HOME/workspaces/aptana/gifmaker/src/gifmaker.py"
alias downchan="$(vepy downchan) $HOME/workspaces/aptana/downchan/src/downchan.py"
alias beet-playlist="$(vepy beet-playlist) $HOME/workspaces/aptana/beet-playlist/src/main.py"
alias bp='beet-playlist'
alias chorddb="$(vepy chorddb) $HOME/workspaces/aptana/chorddb/src/chorddb.py"
alias issue-branch="$(vepy issue-branch) $HOME/workspaces/aptana/issue-branch/src/issue_branch.py"
alias rp8='p8 $(current_git_root)'
alias p8b='p8 | grep -v blank'
alias plt='PYTHONPATH=$(readlink -f .) pl ../test'

if [[ ! -z "$(vefile youtube-dl bin/youtube-dl)" ]]; then
  alias youtube-dl="noglob $(vepy youtube-dl) $(vefile youtube-dl bin/youtube-dl)"
else
  alias youtube-dl='noglob youtube-dl'
fi

# pep8-all function
function p8() {
  local root=${1:-.}
  find $root -name "*.py" -exec pep8 {} \;
}

# autopep8-all-inplace functionm
function ap8() {
  local root=${1:-.}
  find $root -name "*.py" -exec autopep8 -i {} \;
}

# pylint-all function
function pl() {
  local root=${1:-.}
  find $root -name "*.py" -exec pylint -r n -d C0111 {} +
}

# run Nosetests
function nose() {
  if [[ -n "${1:-}" && -e "$1" ]]; then
    test_folder=$1
    shift
  else
    echo "Autodetecting test folder"
    local test_folder=$(_detect_test_folder)
    if [[ -z "$test_folder" ]]; then
      echo "Could not autodetect test folder. Defaulting to current directory"
      test_folder="."
    fi
  fi
  echo "Running tests in '$test_folder'"
  nosetests $test_folder "$@"
}

function _detect_test_folder() {
  local parent=$(readlink -f .)
  local root=$(readlink -f $(current_git_root 2>/dev/null || echo "/"))
  while true; do
    for subfolder in test tests; do
      local folder=$parent/$subfolder
      if [[ -d "$folder" ]]; then
        echo $folder
        return 0
      fi
    done
    if [[ "$parent" == "$root" ]]; then
      return 1;
    fi
    parent=$(dirname $parent)
  done
}

# play all function
pall() {
  for arg; do
    if [ "$arg" = "--random" ]; then
      SORT_FLAGS="${SORT_FLAGS:-} -R"
    fi
  done
  noglob find $1 -name *.mp3 -o -name *.flac -o -name *.ogg | sort ${SORT_FLAGS:-} | tr '\n' '\0' | xargs -0 -n 10000 mplayer
}

#puppet stuff
alias puppet-lint-all='noglob find -name *.pp -exec puppet-lint --with-filename {} +;'
alias pla=puppet-lint-all

# get the name of the branch we are on
function git_prompt_info() {
  if [[ "$(git config --get oh-my-zsh.hide-status)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
    ref=${ref#refs/heads/}
    if [[ ${#ref} -gt 30 ]]; then
      ref="$(echo $ref | cut -c -27)..."
    fi
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

# Taking the cool stuff from .oh-my-zsh/plugins/common-aliases
alias -g HH='| head'
alias -g TT='| tail'
alias -g GG='| grep'
alias -g LL="| less"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"

alias dud='du --max-depth=1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

# ... and some of my own
alias -g VV='| vim -'
alias -g SS='| sort'
alias -g UU='| uniq'

# 256 color terminal
export TERM=xterm-256color

# vim: ft=sh
