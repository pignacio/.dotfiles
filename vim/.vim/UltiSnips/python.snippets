snippet nt "namedtuple"
${1:TupleName} = collections.namedtuple('$1', ${2:fields})
endsnippet

snippet future "__future__ definition"
from __future__ import absolute_import, unicode_literals, division
endsnippet

snippet pfuture "__future__ definition with print"
from __future__ import (absolute_import, unicode_literals, division,
                        print_function)
endsnippet

snippet logger "logger definition"
logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
endsnippet

snippet model "Django model"
class ${1:MyModel}(models.Model):
    $0

    updated_at = models.DateTimeField(auto_now=True, editable=False)
    created_at = models.DateTimeField(auto_now_add=True, editable=False)

    class Meta(object):  # pylint: disable=too-few-public-methods
        db_table = '${1/(.)?([A-Z])/(?1:$1_\l$2:\l$2)/g}'
        verbose_name = '${1/(.)?([A-Z])/(?1:$1 \l$2:\l$2)/g}'
        verbose_name_plural = '${1/(.)?([A-Z])/(?1:$1 \l$2:\l$2)/g}s'

    def get_absolute_url(self):
        pass

    def __unicode__(self):
        pass
endsnippet

snippet charf "CharField"
models.CharField(_('$1'), max_length=${2:255})
endsnippet

snippet fkey "FoireignKey"
models.ForeignKey($1)
endsnippet

snippet args "star-args" i
*args${0}
endsnippet

snippet kwargs "star-kwargs" i
**kwargs${0}
endsnippet

snippet akw "star-args-kwargs" i
*args, **kwargs${0}
endsnippet

snippet parser "argparse.Argumentparser"
def _get_arg_parser():
    parser = argparse.ArgumentParser()
    ${0}
    return parser
endsnippet

snippet pd "pylint disable comment"
# pylint: disable=${0}
endsnippet

snippet yd "yapf disable comment"
# yapf: disable
endsnippet

snippet ye "yapf enable comment"
# yapf: enable
endsnippet

snippet _a "__all__"
__all__ = (
    '${0}',
)  # yapf: disable
endsnippet

global !p
def get_current_class_name(extra_indent=4):
    import re
    current_indent = len(re.match('(\s*)', vim.current.line).group(1))
    current_indent -= extra_indent
    for lineno in reversed(xrange(vim.current.range.start)):
        match = re.match('(\s*)class\s*(\w+)\(', vim.current.buffer[lineno])
        if match and len(match.group(1)) < current_indent:
            return match.group(2)
    return "Class"
endglobal

snippet over "Override"
def ${1:function_name}(self, ${2:*args, **kwargs}):
    ${3:res} = super(${4:`!p snip.rv = get_current_class_name()`}, self).$1(${5:$2})
    ${0}
    return $3
endsnippet

snippet vover "Void Override"
def ${1:function_name}(self, ${2:*args, **kwargs}):
    super(${4:`!p snip.rv = get_current_class_name()`}, self).$1(${5:$2})
    ${0}
endsnippet

snippet rover "Return Override"
def ${1:function_name}(self, ${2:*args, **kwargs}):
    ${0}
    return super(${4:`!p snip.rv = get_current_class_name()`}, self).$1(${5:$2})
endsnippet

snippet super "super(Class, self)"
super(${1:`!p snip.rv = get_current_class_name()`}, self).${0}
endsnippet

snippet nosemain "Main method for nose tests"
if __name__ == '__main__':
    from nose import main
    main(defaultTest=__name__)
endsnippet

snippet _ "Translation"
_('${0}')
endsnippet

snippet todo "ToDo"
# TODO(${1:irossi}): ${0}
endsnippet

snippet cm "Class method"
@classmethod
def ${1:name}(cls, ${2}):
    ${0}
endsnippet

snippet sm "Static method"
@staticmethod
def ${1:name}(${2}):
    ${0}
endsnippet

snippet st "ipdb set trace" b
import ipdb; ipdb.set_trace()
endsnippet
